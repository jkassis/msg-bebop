"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Msg = exports.BEBOP_SCHEMA = void 0;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           3.2.0
//
//
//       bebopc source:
//           https://github.com/6over3/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
const bebop_1 = require("bebop");
exports.BEBOP_SCHEMA = new Uint8Array([
    3, 1, 0, 0, 0, 77, 115, 103, 0, 1, 0, 0, 20, 0, 0, 0, 0,
    5, 98, 111, 100, 121, 0, 245, 255, 255, 255, 0, 102, 114,
    111, 109, 73, 100, 0, 245, 255, 255, 255, 0, 105, 100, 0,
    245, 255, 255, 255, 0, 116, 111, 73, 100, 115, 0, 242,
    255, 255, 255, 0, 245, 255, 255, 255, 0, 116, 121, 112,
    101, 0, 245, 255, 255, 255, 0, 0, 0, 0, 0
]);
exports.Msg = Object.freeze(/*#__PURE__*/ Object.assign(
// Factory function
(data) => {
    return Object.freeze({
        ...data,
        encode() {
            return exports.Msg.encode(this);
        }
    });
}, 
// Static methods
{
    encode(record) {
        const view = bebop_1.BebopView.getInstance();
        view.startWriting();
        exports.Msg.encodeInto(record, view);
        return view.toArray();
    },
    encodeInto(record, view) {
        view.writeString(record.body);
        view.writeString(record.fromId);
        view.writeString(record.id);
        {
            const length0 = record.toIds.length;
            view.writeUint32(length0);
            for (let i0 = 0; i0 < length0; i0++) {
                view.writeString(record.toIds[i0]);
            }
        }
        view.writeString(record.type);
    },
    decode(buffer) {
        const view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        const decoded = exports.Msg.readFrom(view);
        return (0, exports.Msg)(decoded);
    },
    readFrom(view) {
        let field0;
        field0 = view.readString();
        let field1;
        field1 = view.readString();
        let field2;
        field2 = view.readString();
        let field3;
        {
            const length0 = view.readUint32();
            field3 = [];
            for (let i0 = 0; i0 < length0; i0++) {
                let x0;
                x0 = view.readString();
                field3[i0] = x0;
            }
        }
        let field4;
        field4 = view.readString();
        return {
            body: field0,
            fromId: field1,
            id: field2,
            toIds: field3,
            type: field4,
        };
    },
}));
//# sourceMappingURL=msg.js.map