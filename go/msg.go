// Code generated by bebopc-go; DO NOT EDIT.

package bebopgen

import (
	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
	"io"
)

var _ bebop.Record = &Msg{}

// High-performance message structure for polyglot applications
type Msg struct {
	Body string
	FromId string
	Id string
	ToIds []string
	Type string
}

func (bbp Msg) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Body)))
	copy(buf[at+4:at+4+len(bbp.Body)], []byte(bbp.Body))
	at += 4 + len(bbp.Body)
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.FromId)))
	copy(buf[at+4:at+4+len(bbp.FromId)], []byte(bbp.FromId))
	at += 4 + len(bbp.FromId)
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Id)))
	copy(buf[at+4:at+4+len(bbp.Id)], []byte(bbp.Id))
	at += 4 + len(bbp.Id)
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.ToIds)))
	at += 4
	for _, v1 := range bbp.ToIds {
		iohelp.WriteUint32Bytes(buf[at:], uint32(len(v1)))
		copy(buf[at+4:at+4+len(v1)], []byte(v1))
		at += 4 + len(v1)
	}
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Type)))
	copy(buf[at+4:at+4+len(bbp.Type)], []byte(bbp.Type))
	at += 4 + len(bbp.Type)
	return at
}

func (bbp *Msg) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	bbp.Body, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.Body)
	bbp.FromId, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.FromId)
	bbp.Id, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.Id)
	if len(buf[at:]) < 4 {
		return io.ErrUnexpectedEOF
	}
	bbp.ToIds = make([]string, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.ToIds {
		(bbp.ToIds)[i1], err = iohelp.ReadStringBytes(buf[at:])
		if err != nil {
			return err
		}
		at += 4 + len((bbp.ToIds)[i1])
	}
	bbp.Type, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.Type)
	return nil
}

func (bbp Msg) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.Body)))
	w.Write([]byte(bbp.Body))
	iohelp.WriteUint32(w, uint32(len(bbp.FromId)))
	w.Write([]byte(bbp.FromId))
	iohelp.WriteUint32(w, uint32(len(bbp.Id)))
	w.Write([]byte(bbp.Id))
	iohelp.WriteUint32(w, uint32(len(bbp.ToIds)))
	for _, elem := range bbp.ToIds {
		iohelp.WriteUint32(w, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	iohelp.WriteUint32(w, uint32(len(bbp.Type)))
	w.Write([]byte(bbp.Type))
	return w.Err
}

func (bbp *Msg) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bbp.Body = iohelp.ReadString(r)
	bbp.FromId = iohelp.ReadString(r)
	bbp.Id = iohelp.ReadString(r)
	bbp.ToIds = make([]string, iohelp.ReadUint32(r))
	for i1 := range bbp.ToIds {
		(bbp.ToIds[i1]) = iohelp.ReadString(r)
	}
	bbp.Type = iohelp.ReadString(r)
	return r.Err
}

func (bbp Msg) Size() int {
	bodyLen := 0
	bodyLen += 4 + len(bbp.Body)
	bodyLen += 4 + len(bbp.FromId)
	bodyLen += 4 + len(bbp.Id)
	bodyLen += 4
	for _, elem := range bbp.ToIds {
		bodyLen += 4 + len(elem)
	}
	bodyLen += 4 + len(bbp.Type)
	return bodyLen
}

func (bbp Msg) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func MakeMsg(r *iohelp.ErrorReader) (Msg, error) {
	v := Msg{}
	err := v.DecodeBebop(r)
	return v, err
}

func MakeMsgFromBytes(buf []byte) (Msg, error) {
	v := Msg{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

